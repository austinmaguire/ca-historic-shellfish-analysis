Requesting Compressed Files
ERDDAP doesn't offer results stored in compressed (e.g., .zip or .gzip) files. Instead, ERDDAP looks for accept-encoding in the HTTP GET request header sent by the client. If a supported compression type (gzip, x-gzip, or deflate) is found in the accept-encoding list, ERDDAP includes "content‑encoding" in the HTTP response header and compresses the data as it transmits it. It is up to the client program to look for content-encoding and decompress the data accordingly. Requesting compression is optional, but compressed responses are often 3-10 times faster, so this is a big time savings if you are downloading lots of large files. (Note that there is no benefit to requesting compressed .png files since the files' contents are already compressed.)
	•	By default, browsers and OPeNDAP clients always request compressed data and decompress the returned data.
	•	With curl, add --compressed to the command line to tell curl to request a compressed response and automatically decompress it.
	•	With other client software, you have explicitly set this up.  Here is a Java example.  Here is a Python example (although you should either handle deflate'd responses or not request deflate).
Command Line Downloads with curl
If you want to download a series of files from ERDDAP, you don't have to request each file's ERDDAP URL in your browser, sitting and waiting for each file to download. Ways to use curl:
	•	If you are comfortable writing computer programs (e.g., with C, Java, Python, Matlab, r), you can write a program with a loop that imports all of the desired data files.
	•	If you are comfortable with command line programs (just running a program, or using bash or tcsh scripts in Linux or Mac OS X, or batch files in Windows), you can use curl to save results files from ERDDAP into files on your hard drive, without using a browser or writing a computer program.
ERDDAP+curl is amazingly powerful and allows you to use ERDDAP in many new ways. To install curl:
	•	On Linux and Mac OS X, curl is probably already installed as /usr/bin/curl.
	•	On Windows, or if your computer doesn't have curl already, you need to download curl and install it. To get to a command line in Windows, click on the Windows icon and type cmd into the search text field. ("Win32 - Generic, Win32, binary (without SSL)" worked for me in Windows 7.)
Please be kind to other ERDDAP users: run just one script or curl command at a time.
Instructions for using curl are on the curl man page and in this curl tutorial. But here is a quick tutorial related to using curl with ERDDAP:
	•	To download and save one file, use  curl --compressed -g "erddapUrl" -o fileDir/fileName.ext  where --compressed tells curl to request a compressed response and automatically decompress it,    -g disables curl's globbing feature,    erddapUrl is any ERDDAP URL that requests a data or image file, and    -o fileDir/fileName.ext specifies the name for the file that will be created.  For example, curl --compressed -g "https://coastwatch.pfeg.noaa.gov/erddap/files/cwwcNDBCMet/nrt/NDBC_41008_met.nc" -o ndbc/41008.nc In curl, as in many other programs, the query part of the erddapUrl must be percent encoded: all characters in parameter values (the parts after '=' signs) other than A-Za-z0-9_-!.~'()* must be encoded as %HH, where HH is the 2 digit hexadecimal value of the character, for example, a space becomes %20. Characters above #127 must be converted to UTF-8 bytes, then each UTF-8 byte must be percent encoded (ask a programmer for help). There are websites that percent encode and decode for you. If you get the URL from your browser's address text field, this may be already done.   
	•	To download and save many files in one step, use curl with the globbing feature enabled:  curl --compressed "erddapUrl" -o fileDir/fileName#1.ext  Since the globbing feature treats the characters [, ], {, and } as special, you must also percent encode them in the erddapURL as %5B, %5D, %7B, %7D, respectively. Fortunately, these are almost never in "files" filenames. Then, in the erddapUrl, replace a zero-padded number (for example 01) with a range of values (for example, [01-15]), or replace a substring (for example 41008) with a list of values (for example, {41008,41009,41010}). The #1 within the output fileName causes the current value of the range or list to be put into the output fileName. For example, curl --compressed "https://coastwatch.pfeg.noaa.gov/erddap/files/cwwcNDBCMet/nrt/NDBC_{41008,41009,41010}_met.nc" -o ndbc/#1.nc